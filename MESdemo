<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Allegion Steelcraft - Visual MES Demo</title>
    <style>
        /* --- General Styles --- */
        :root {
            --allegion-blue: #007398;
            --allegion-gray: #f4f4f4;
            --dark-gray: #333;
            --light-gray: #ddd;
            --card-bg: #ffffff;
            --shadow: 0 4px 8px rgba(0,0,0,0.1);
            --border-radius: 8px;
            --rush-color: #db4437;
            --kd-color: #4285f4;
            --fw-color: #f4b400;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            background-color: var(--allegion-gray);
            color: var(--dark-gray);
            margin: 0;
            padding: 0;
            overflow-x: auto;
        }

        /* --- Header --- */
        .header {
            background-color: var(--allegion-blue);
            color: white;
            padding: 15px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            position: sticky;
            top: 0;
            z-index: 1000;
        }

        .header h1 {
            margin: 0;
            font-size: 1.8em;
        }

        .add-order-btn {
            background-color: white;
            color: var(--allegion-blue);
            border: none;
            padding: 10px 20px;
            font-size: 1em;
            font-weight: bold;
            border-radius: var(--border-radius);
            cursor: pointer;
            transition: all 0.2s ease-in-out;
        }

        .add-order-btn:hover {
            background-color: #e0f7ff;
            transform: translateY(-2px);
        }

        /* --- MES Board --- */
        #mes-board {
            display: flex;
            gap: 15px;
            padding: 20px;
            min-height: calc(100vh - 100px);
        }

        .production-stage {
            background-color: #e9ecef;
            border-radius: var(--border-radius);
            min-width: 300px;
            width: 300px;
            display: flex;
            flex-direction: column;
            box-shadow: var(--shadow);
            transition: background-color 0.3s;
        }

        .production-stage h2 {
            font-size: 1.2em;
            padding: 15px;
            margin: 0;
            background-color: #ced4da;
            border-top-left-radius: var(--border-radius);
            border-top-right-radius: var(--border-radius);
            text-align: center;
        }

        .cards-container {
            padding: 10px;
            flex-grow: 1;
            min-height: 150px;
            transition: background-color 0.2s ease;
        }
        
        /* Drag & Drop Highlight */
        .drag-over {
            background-color: #cce5ff;
        }

        /* --- Order Cards --- */
        .order-card {
            background-color: var(--card-bg);
            padding: 15px;
            border-radius: var(--border-radius);
            margin-bottom: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.08);
            border-left: 5px solid var(--light-gray);
            cursor: grab;
            transition: all 0.2s;
            position: relative;
        }
        
        .order-card.is-rush {
            border-left-color: var(--rush-color);
        }

        .order-card:hover {
            box-shadow: 0 6px 12px rgba(0,0,0,0.15);
            transform: translateY(-2px);
        }
        
        .order-card.dragging {
            opacity: 0.5;
            transform: rotate(3deg);
        }

        .order-card h3 {
            margin: 0 0 5px 0;
            font-size: 1.1em;
        }
        .order-card p {
            margin: 4px 0;
            font-size: 0.9em;
            color: #555;
        }
        
        .card-tag {
            display: inline-block;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 0.8em;
            font-weight: bold;
            color: white;
            margin-top: 10px;
        }
        
        .tag-kd { background-color: var(--kd-color); }
        .tag-fw { background-color: var(--fw-color); }

        .card-actions {
            position: absolute;
            top: 10px;
            right: 10px;
            opacity: 0;
            transition: opacity 0.2s;
        }

        .order-card:hover .card-actions {
            opacity: 1;
        }

        .card-actions button {
            background: none;
            border: none;
            cursor: pointer;
            font-size: 1.2em;
            padding: 5px;
            color: #777;
        }
        .card-actions button:hover { color: #000; }

        /* --- Modal for Add/Edit Order --- */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.6);
            z-index: 2000;
            display: none;
        }

        .modal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 30px;
            border-radius: var(--border-radius);
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            z-index: 2001;
            width: 90%;
            max-width: 500px;
            display: none;
        }

        .modal h2 {
            margin-top: 0;
            color: var(--allegion-blue);
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .form-group input[type="text"], .form-group textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid var(--light-gray);
            border-radius: 5px;
            box-sizing: border-box;
        }

        .form-group .radio-group { display: flex; gap: 20px; }
        .form-group .checkbox-group { display: flex; align-items: center; gap: 10px; }


        .modal-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            margin-top: 20px;
        }

        .modal-actions button {
            padding: 10px 20px;
            border-radius: 5px;
            border: none;
            font-size: 1em;
            font-weight: bold;
            cursor: pointer;
        }

        .btn-save {
            background-color: var(--allegion-blue);
            color: white;
        }

        .btn-cancel {
            background-color: #ccc;
            color: #333;
        }

    </style>
</head>
<body>

    <header class="header">
        <h1>Allegion Steelcraft - Visual MES</h1>
        <button class="add-order-btn" id="addOrderBtn">＋ Add New Order</button>
    </header>

    <main id="mes-board">
        <!-- Production stage columns will be dynamically generated by JS -->
    </main>

    <!-- Modal for Adding/Editing Orders -->
    <div class="modal-overlay" id="modalOverlay"></div>
    <div class="modal" id="orderModal">
        <h2 id="modalTitle">Add New Order</h2>
        <form id="orderForm">
            <input type="hidden" id="editCardId">
            <div class="form-group">
                <label for="orderNumber">Order Number</label>
                <input type="text" id="orderNumber" required>
            </div>
            <div class="form-group">
                <label for="customerName">Customer Name</label>
                <input type="text" id="customerName" required>
            </div>
            <div class="form-group">
                <label>Frame Type</label>
                <div class="radio-group">
                    <label><input type="radio" name="frameType" value="KD" checked> K/D (Knock-Down)</label>
                    <label><input type="radio" name="frameType" value="FW"> FW (Full Weld)</label>
                </div>
            </div>
            <div class="form-group">
                <label for="details">Details / Parts</label>
                <textarea id="details" rows="3" placeholder="e.g., Strike Jamb, Hinge Jamb, Head..."></textarea>
            </div>
            <div class="form-group">
                <div class="checkbox-group">
                    <input type="checkbox" id="isRush">
                    <label for="isRush">Rush Order</label>
                </div>
            </div>
            <div class="modal-actions">
                <button type="button" class="btn-cancel" id="cancelBtn">Cancel</button>
                <button type="submit" class="btn-save">Save Order</button>
            </div>
        </form>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const STAGES = [
                { id: 'stage-orders', title: 'Orders Received' },
                { id: 'stage-shearing', title: 'Shearing' },
                { id: 'stage-punching', title: 'Punching (Vipros/Pega)' },
                { id: 'stage-forming', title: 'Press Brake (Forming)' },
                { id: 'stage-spotweld', title: 'Spot Welding' },
                { id: 'stage-paint', title: 'Painting' },
                { id: 'stage-final-assembly', title: 'Final Assembly (Weld/Pack)' },
                { id: 'stage-shipping', title: 'Ready to Ship' },
            ];
            
            // The "single source of truth" for all orders
            let orders = [
                { id: 1698350001, orderNumber: 'SO-78901', customer: 'Turner Construction', type: 'KD', details: '3x Jambs, 1x Head', stage: 'stage-punching', isRush: false },
                { id: 1698350002, orderNumber: 'SO-78902', customer: 'PCL Constructors', type: 'FW', details: 'Standard frame set', stage: 'stage-shearing', isRush: true },
                { id: 1698350003, orderNumber: 'SO-78903', customer: 'Clark Builders', type: 'KD', details: 'Hinge Jamb only', stage: 'stage-forming', isRush: false },
                { id: 1698350004, orderNumber: 'SO-78904', customer: 'Local Supply Co.', type: 'KD', details: '10x KD stock frames', stage: 'stage-orders', isRush: false },
            ];

            // DOM Elements
            const board = document.getElementById('mes-board');
            const addOrderBtn = document.getElementById('addOrderBtn');
            const modalOverlay = document.getElementById('modalOverlay');
            const orderModal = document.getElementById('orderModal');
            const orderForm = document.getElementById('orderForm');
            const cancelBtn = document.getElementById('cancelBtn');
            const modalTitle = document.getElementById('modalTitle');
            const editCardIdInput = document.getElementById('editCardId');

            // --- Board Rendering ---
            function renderBoard() {
                board.innerHTML = ''; // Clear board

                // Create columns
                STAGES.forEach(stage => {
                    const stageEl = document.createElement('div');
                    stageEl.className = 'production-stage';
                    stageEl.id = stage.id;
                    stageEl.innerHTML = `
                        <h2>${stage.title}</h2>
                        <div class="cards-container" id="${stage.id}-cards"></div>
                    `;
                    board.appendChild(stageEl);
                });

                // Create and place cards
                orders.forEach(order => {
                    const card = createCardElement(order);
                    const container = document.getElementById(`${order.stage}-cards`);
                    if (container) {
                        container.appendChild(card);
                    }
                });

                // Add drag and drop listeners
                addDragAndDropListeners();
            }

            function createCardElement(order) {
                const card = document.createElement('div');
                card.className = 'order-card';
                if(order.isRush) card.classList.add('is-rush');
                card.id = `card-${order.id}`;
                card.draggable = true;

                card.innerHTML = `
                    <h3>Order: ${order.orderNumber}</h3>
                    <p><strong>Customer:</strong> ${order.customer}</p>
                    <p>${order.details}</p>
                    <span class="card-tag ${order.type === 'KD' ? 'tag-kd' : 'tag-fw'}">${order.type}</span>
                    <div class="card-actions">
                        <button class="edit-btn" title="Edit">✏️</button>
                        <button class="delete-btn" title="Delete">🗑️</button>
                    </div>
                `;
                
                // Add event listeners for edit and delete buttons
                card.querySelector('.edit-btn').addEventListener('click', () => openModalForEdit(order.id));
                card.querySelector('.delete-btn').addEventListener('click', () => deleteOrder(order.id));

                return card;
            }

            // --- Modal Logic ---
            function openModal(isEdit = false, orderId = null) {
                orderForm.reset();
                if (isEdit) {
                    modalTitle.textContent = 'Edit Order';
                    editCardIdInput.value = orderId;
                    const order = orders.find(o => o.id == orderId);
                    if (order) {
                        document.getElementById('orderNumber').value = order.orderNumber;
                        document.getElementById('customerName').value = order.customer;
                        document.querySelector(`input[name="frameType"][value="${order.type}"]`).checked = true;
                        document.getElementById('details').value = order.details;
                        document.getElementById('isRush').checked = order.isRush;
                    }
                } else {
                    modalTitle.textContent = 'Add New Order';
                    editCardIdInput.value = '';
                }
                modalOverlay.style.display = 'block';
                orderModal.style.display = 'block';
            }

            function closeModal() {
                modalOverlay.style.display = 'none';
                orderModal.style.display = 'none';
            }

            function openModalForEdit(orderId) {
                openModal(true, orderId);
            }

            // --- CRUD Operations ---
            function handleFormSubmit(e) {
                e.preventDefault();
                
                const id = editCardIdInput.value;
                const orderData = {
                    orderNumber: document.getElementById('orderNumber').value,
                    customer: document.getElementById('customerName').value,
                    type: document.querySelector('input[name="frameType"]:checked').value,
                    details: document.getElementById('details').value,
                    isRush: document.getElementById('isRush').checked
                };

                if (id) { // Update existing order
                    const orderIndex = orders.findIndex(o => o.id == id);
                    if (orderIndex > -1) {
                        orders[orderIndex] = { ...orders[orderIndex], ...orderData };
                    }
                } else { // Create new order
                    const newOrder = {
                        id: Date.now(), // Simple unique ID
                        stage: STAGES[0].id, // Add to the first column
                        ...orderData
                    };
                    orders.push(newOrder);
                }
                
                closeModal();
                renderBoard();
            }

            function deleteOrder(orderId) {
                if(confirm('Are you sure you want to delete this order?')) {
                    orders = orders.filter(o => o.id != orderId);
                    renderBoard();
                }
            }

            // --- Drag and Drop Logic ---
            function addDragAndDropListeners() {
                const cards = document.querySelectorAll('.order-card');
                const containers = document.querySelectorAll('.cards-container');

                cards.forEach(card => {
                    card.addEventListener('dragstart', () => {
                        card.classList.add('dragging');
                    });
                    card.addEventListener('dragend', () => {
                        card.classList.remove('dragging');
                    });
                });

                containers.forEach(container => {
                    container.addEventListener('dragover', e => {
                        e.preventDefault();
                        container.parentElement.classList.add('drag-over');
                    });

                    container.addEventListener('dragleave', () => {
                       container.parentElement.classList.remove('drag-over');
                    });

                    container.addEventListener('drop', e => {
                        e.preventDefault();
                        container.parentElement.classList.remove('drag-over');
                        const draggingCard = document.querySelector('.dragging');
                        if (draggingCard) {
                            // Update the state
                            const cardId = draggingCard.id.split('-')[1];
                            const newStageId = container.parentElement.id;
                            const orderIndex = orders.findIndex(o => o.id == cardId);
                            if(orderIndex > -1) {
                                orders[orderIndex].stage = newStageId;
                                // Re-render the board from the updated state
                                renderBoard();
                            }
                        }
                    });
                });
            }

            // --- Initial Setup ---
            addOrderBtn.addEventListener('click', () => openModal());
            cancelBtn.addEventListener('click', closeModal);
            modalOverlay.addEventListener('click', closeModal);
            orderForm.addEventListener('submit', handleFormSubmit);

            renderBoard(); // Initial render
        });
    </script>

</body>
</html>
